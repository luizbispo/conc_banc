# modules/report_generator.py
import pandas as pd
import numpy as np
from datetime import datetime
from fpdf import FPDF
import tempfile
import os
from typing import List, Dict, Any
import traceback

class PDFReport(FPDF):
    def __init__(self):
        super().__init__()
        self.set_auto_page_break(auto=True, margin=15)
        self.add_page()
        
    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 40, 'RELAT√ìRIO DE CONCILIA√á√ÉO BANC√ÅRIA', 0, 1, 'C')
        self.set_font('Arial', 'I', 10)
        self.cell(0, 5, f'Gerado em: {datetime.now().strftime("%d/%m/%Y %H:%M")}', 0, 1, 'C')
        self.ln(5)
    
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'P√°gina {self.page_no()}', 0, 0, 'C')
    
    def chapter_title(self, title):
        self.set_font('Arial', 'B', 14)
        self.cell(0, 10, self.clean_text(title), 0, 1, 'L')
        self.ln(2)

    def chapter_body(self, body):
        self.set_font('Arial', '', 10)
        cleaned_body = self.clean_text(body)
        self.multi_cell(0, 6, cleaned_body)
        self.ln()
    
    def clean_text(self, text):
        if not text: return ""
        text = str(text)
        replacements = {
            '‚úÖ': '[OK]', '‚úî': '[OK]', '‚úì': '[OK]', '‚òë': '[OK]',
            '‚ùå': '[ERRO]', '‚úñ': '[ERRO]', '‚ùé': '[ERRO]',
            '‚ö†': '[ATENCAO]', '‚ö°': '[RAPIDO]', 'üéØ': '[FOCO]',
            'üìä': '[METRICAS]', 'üìã': '[RELATORIO]', 'üîç': '[ANALISE]',
            'üí°': '[DICA]', 'üöÄ': '[RAPIDO]', '‚≠ê': '[DESTAQUE]',
            '‚Ä¢': '-', '¬∑': '-', '‚Äì': '-', '‚Äî': '-', '‚Ä£': '-', '‚ÅÉ': '-',
            '‚Äú': '"', '‚Äù': '"', '‚Äò': "'", '‚Äô': "'", '¬¥': "'", '`': "'",
        }
        for old_char, new_char in replacements.items():
            text = text.replace(old_char, new_char)
        try:
            text = text.encode('latin-1', 'replace').decode('latin-1')
        except: pass
        return text

def _gerar_relatorio_fallback(empresa_nome: str, contador_nome: str, erro: str) -> str:
    """Gera um relat√≥rio minimalista em caso de erro cr√≠tico"""
    try:
        pdf = PDFReport()
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 40, 'RELAT√ìRIO DE CONCILIA√á√ÉO - ERRO', 0, 1, 'C')
        pdf.set_font('Arial', '', 12)
        pdf.multi_cell(0, 10, f"Empresa: {pdf.clean_text(empresa_nome)}")
        pdf.multi_cell(0, 10, f"Contador: {pdf.clean_text(contador_nome)}")
        pdf.multi_cell(0, 10, f"Data: {datetime.now().strftime('%d/%m/%Y')}")
        pdf.ln(10)
        pdf.set_font('Arial', 'B', 14)
        pdf.multi_cell(0, 10, "OCORREU UM ERRO DURANTE A GERA√á√ÉO DO RELAT√ìRIO:")
        pdf.set_font('Arial', '', 10)
        pdf.multi_cell(0, 8, f"Erro: {pdf.clean_text(erro)}")
        pdf.multi_cell(0, 8, "Por favor, tente novamente ou entre em contato com o suporte.")
        pdf.ln(10)
        pdf.multi_cell(0, 8, "Informa√ß√µes t√©cnicas para o suporte:")
        pdf.set_font('Arial', 'I', 8)
        pdf.multi_cell(0, 6, f"Timestamp: {datetime.now().isoformat()}")
        
        temp_dir = tempfile.gettempdir()
        pdf_path = os.path.join(temp_dir, f'relatorio_erro_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf')
        pdf.output(pdf_path)
        return pdf_path
    except Exception as e:
        # Fallback extremo - criar arquivo de texto simples
        temp_dir = tempfile.gettempdir()
        txt_path = os.path.join(temp_dir, f'relatorio_erro_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt')
        with open(txt_path, 'w', encoding='utf-8') as f:
            f.write(f"RELAT√ìRIO DE CONCILIA√á√ÉO - ERRO\n")
            f.write(f"Empresa: {empresa_nome}\n")
            f.write(f"Contador: {contador_nome}\n")
            f.write(f"Data: {datetime.now().strftime('%d/%m/%Y')}\n")
            f.write(f"Erro original: {erro}\n")
            f.write(f"Erro no fallback: {str(e)}\n")
        return txt_path

def gerar_relatorio_analise(resultados_analise: Dict,
                          extrato_df: pd.DataFrame,
                          contabil_df: pd.DataFrame,
                          empresa_nome: str = "Empresa",
                          contador_nome: str = "Contador",
                          periodo: str = "",
                          observacoes: str = "",
                          formato: str = "completo",
                          divergencias_tabela: pd.DataFrame = None,
                          conta_analisada: str = None,
                          **kwargs) -> str:
    """
    Gera relat√≥rio de an√°lise (n√£o de concilia√ß√£o)
    formato: 'completo' ou 'resumido'
    conta_analisada: N√∫mero da conta banc√°ria analisada
    """
    try:
        print(f"üîß INICIANDO GERA√á√ÉO DE RELAT√ìRIO - Formato: {formato}")
        print(f"   Empresa: {empresa_nome}")
        print(f"   Conta: {conta_analisada}")
        print(f"   Resultados: {len(resultados_analise.get('matches', []))} matches")
        print(f"   Observa√ß√µes: {observacoes[:100]}{'...' if len(observacoes) > 100 else ''}")
        
        # VALIDA√á√ÉO DE DADOS CR√çTICOS
        if resultados_analise is None:
            raise ValueError("Resultados da an√°lise n√£o fornecidos")
        
        if extrato_df is None or len(extrato_df) == 0:
            raise ValueError("DataFrame do extrato est√° vazio ou n√£o fornecido")
            
        if contabil_df is None or len(contabil_df) == 0:
            raise ValueError("DataFrame cont√°bil est√° vazio ou n√£o fornecido")
        
        pdf = PDFReport()
        
        # P√°gina 1: Capa (comum para ambos os formatos)
        pdf.add_page()
        pdf.set_font('Arial', 'B', 20)
        pdf.cell(0, 40, 'RELAT√ìRIO DE AN√ÅLISE DE CORRESPOND√äNCIAS', 0, 1, 'C')
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 20, pdf.clean_text(empresa_nome), 0, 1, 'C')
        
        # INCLUIR INFORMA√á√ÉO DA CONTA NA CAPA
        pdf.set_font('Arial', 'B', 14)
        if conta_analisada and conta_analisada != "N√£o identificada":
            pdf.cell(0, 10, f'Conta Analisada: {conta_analisada}', 0, 1, 'C')
        
        pdf.set_font('Arial', '', 12)
        pdf.cell(0, 10, f'Per√≠odo: {periodo}', 0, 1, 'C')
        pdf.cell(0, 10, f'Analista: {pdf.clean_text(contador_nome)}', 0, 1, 'C')
        pdf.cell(0, 10, f'Data de gera√ß√£o: {datetime.now().strftime("%d/%m/%Y")}', 0, 1, 'C')
        pdf.cell(0, 10, f'Formato: {formato.upper()}', 0, 1, 'C')
        
        pdf.ln(20)
        pdf.add_page()
        
        # Sum√°rio Executivo (comum para ambos os formatos)
        pdf.chapter_title('RELAT√ìRIO DE AN√ÅLISE - CORRESPOND√äNCIAS IDENTIFICADAS')
        
        total_matches = len(resultados_analise.get('matches', []))
        total_excecoes = len(resultados_analise.get('excecoes', []))
        total_extrato = len(extrato_df) if extrato_df is not None else 0
        total_contabil = len(contabil_df) if contabil_df is not None else 0
        
        # INCLUIR CONTA NO SUM√ÅRIO EXECUTIVO
        resumo_texto = f"""
        ESTE √â UM RELAT√ìRIO DE AN√ÅLISE E IDENTIFICA√á√ÉO DE CORRESPOND√äNCIAS
        
        CONTA ANALISADA: {conta_analisada if conta_analisada else "N√£o especificada"}
        
        OBJETIVO:
        Identificar automaticamente rela√ß√µes entre transa√ß√µes banc√°rias e lan√ßamentos cont√°beis
        para auxiliar no processo de concilia√ß√£o manual.
        
        RESULTADOS DA AN√ÅLISE:
        - Transa√ß√µes banc√°rias analisadas: {total_extrato}
        - Lan√ßamentos cont√°beis analisados: {total_contabil}
        - Correspond√™ncias identificadas: {total_matches}
        - Diverg√™ncias encontradas: {total_excecoes}
        - Per√≠odo analisado: {periodo}
        
        METODOLOGIA:
        An√°lise em tr√™s camadas:
        1. CORRESPOND√äNCIAS EXATAS: Valores e datas id√™nticos, identificadores √∫nicos
        2. CORRESPOND√äNCIAS POR SIMILARIDADE: Valores e datas pr√≥ximos, textos similares  
        3. AN√ÅLISE DE PADR√ïES: Parcelamentos, consolida√ß√µes, padr√µes temporais
        """
        
        pdf.chapter_body(resumo_texto)
        
        # NOVA SE√á√ÉO: OBSERVA√á√ïES DO USU√ÅRIO
        if observacoes and observacoes.strip():
            pdf.ln(5)
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, 'OBSERVA√á√ïES E CONTEXTO ADICIONAL:', 0, 1)
            pdf.set_font('Arial', '', 10)
            
            # FORMATAR OBSERVA√á√ïES COM MESMA FORMATA√á√ÉO DO RESTO DO RELAT√ìRIO
            observacoes_formatadas = pdf.clean_text(observacoes)
            
            # Usar a mesma abordagem do chapter_body para consist√™ncia
            linhas = observacoes_formatadas.split('\n')
            for linha in linhas:
                if linha.strip():
                    # Adicionar indenta√ß√£o igual √†s outras se√ß√µes
                    pdf.cell(10)  # Indenta√ß√£o de 10 unidades
                    pdf.multi_cell(0, 6, linha.strip())
                else:
                    pdf.ln(3)  # Espa√ßo menor entre par√°grafos
            
            pdf.ln(5)
        
        resumo_final = """
        ATEN√á√ÉO: Este relat√≥rio apresenta CORRESPOND√äNCIAS IDENTIFICADAS que devem ser validadas 
        manualmente pelo contador antes da concilia√ß√£o final.
        """
        
        pdf.chapter_body(resumo_final)
        
        # P√°gina 2: Estat√≠sticas (comum para ambos os formatos)
        pdf.add_page()
        pdf.chapter_title('ESTAT√çSTICAS DETALHADAS')
        
        # INCLUIR CONTA NAS ESTAT√çSTICAS
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, f'CONTA: {conta_analisada if conta_analisada else "N√£o especificada"}', 0, 1)
        pdf.set_font('Arial', '', 10)
        
        # M√©tricas principais
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, 'M√âTRICAS PRINCIPAIS:', 0, 1)
        pdf.set_font('Arial', '', 10)
        
        taxa_cobertura = (total_matches / total_extrato * 100) if total_extrato > 0 else 0
        
        # C√ÅLCULOS SEGUROS DE VALORES
        try:
            valor_total_extrato_absoluto = extrato_df['valor'].abs().sum() if 'valor' in extrato_df.columns else 0
            valor_total_extrato = extrato_df['valor'].sum() if 'valor' in extrato_df.columns else 0
            valor_total_contabil = contabil_df['valor'].sum() if 'valor' in contabil_df.columns else 0
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no c√°lculo de valores: {e}")
            valor_total_extrato_absoluto = 0
            valor_total_extrato = 0
            valor_total_contabil = 0
        
        estatisticas_texto = f"""
        VOLUME DE DADOS:
        - Transa√ß√µes banc√°rias: {total_extrato}
        - Lan√ßamentos cont√°beis: {total_contabil}
        - Valor total extrato (absoluto): R$ {valor_total_extrato_absoluto:,.2f}
        - Valor total extrato: R$ {valor_total_extrato:,.2f}
        - Valor total cont√°bil: R$ {valor_total_contabil:,.2f}
        
        RESULTADOS DA IDENTIFICA√á√ÉO:
        - Correspond√™ncias identificadas: {total_matches}
        - Taxa de cobertura: {taxa_cobertura:.1f}%
        - Diverg√™ncias: {total_excecoes}
        
        DISTRIBUI√á√ÉO POR TIPO:
        - Correspond√™ncias 1:1: {len([m for m in resultados_analise.get('matches', []) if m.get('tipo_match') == '1:1'])}
        - Correspond√™ncias 1:N: {len([m for m in resultados_analise.get('matches', []) if m.get('tipo_match') == '1:N'])}
        - Correspond√™ncias N:1: {len([m for m in resultados_analise.get('matches', []) if m.get('tipo_match') == 'N:1'])}
        
        EFETIVIDADE POR CAMADA:
        - Correspond√™ncias exatas: {len([m for m in resultados_analise.get('matches', []) if m.get('camada') == 'exata'])}
        - Correspond√™ncias por similaridade: {len([m for m in resultados_analise.get('matches', []) if m.get('camada') == 'heuristica'])}
        - Correspond√™ncias complexas: {len([m for m in resultados_analise.get('matches', []) if m.get('camada') == 'ia'])}
        """
        
        pdf.chapter_body(estatisticas_texto)
        
        # CONTE√öDO ESPEC√çFICO PARA RELAT√ìRIO COMPLETO
        if formato == 'completo':
            # P√°gina 3: Correspond√™ncias Identificadas (apenas no completo)
            if resultados_analise.get('matches'):
                pdf.add_page()
                pdf.chapter_title('CORRESPOND√äNCIAS IDENTIFICADAS - DETALHES COMPLETOS')
                
                headers = ['ID', 'Tipo', 'Camada', 'Confian√ßa', 'Valor Total', 'Transa√ß√£o Banc√°ria', 'Lan√ßamento Cont√°bil']
                col_widths = [10, 20, 25, 20, 30, 30, 30]
                
                pdf.set_font('Arial', 'B', 8)
                for i, header in enumerate(headers):
                    pdf.cell(col_widths[i], 8, header, 1, 0, 'C')
                pdf.ln()
                
                pdf.set_font('Arial', '', 7)
                for i, match in enumerate(resultados_analise['matches']):
                    pdf.cell(col_widths[0], 6, str(i + 1), 1, 0, 'C')
                    pdf.cell(col_widths[1], 6, match.get('tipo_match', 'N/A'), 1, 0, 'C')
                    pdf.cell(col_widths[2], 6, match.get('camada', 'N/A'), 1, 0, 'C')
                    pdf.cell(col_widths[3], 6, f"{match.get('confianca', 0)}%", 1, 0, 'C')
                    pdf.cell(col_widths[4], 6, f"R$ {match.get('valor_total', 0):.2f}", 1, 0, 'C')
                    pdf.cell(col_widths[5], 6, str(len(match.get('ids_extrato', []))), 1, 0, 'C')
                    pdf.cell(col_widths[6], 6, str(len(match.get('ids_contabil', []))), 1, 0, 'C')
                    pdf.ln()
                
                pdf.ln(10)
                pdf.chapter_title('PRINCIPAIS CORRESPOND√äNCIAS - DETALHES')
                
                for i, match in enumerate(resultados_analise['matches']):
                    pdf.set_font('Arial', 'B', 9)
                    pdf.cell(0, 8, f'Correspond√™ncia {i + 1}: {match.get("tipo_match", "N/A")} - {match.get("camada", "N/A")}', 0, 1)
                    pdf.set_font('Arial', '', 8)
                    pdf.multi_cell(0, 4, f'Justificativa: {pdf.clean_text(match.get("explicacao", "Sem explica√ß√£o"))}')
                    pdf.multi_cell(0, 4, f'Valor: R$ {match.get("valor_total", 0):.2f} | Confian√ßa: {match.get("confianca", 0)}%')       
                    
                    # TENTAR OBTER TRANSA√á√ïES COM TRATAMENTO DE ERRO
                    try:
                        if extrato_df is not None and 'id' in extrato_df.columns:
                            transacoes_extrato = extrato_df[extrato_df['id'].isin(match.get('ids_extrato', []))]
                            pdf.multi_cell(0, 4, f'Transa√ß√µes banc√°rias: {len(transacoes_extrato)}')
                            for _, trans in transacoes_extrato.iterrows():
                                data_str = trans['data'].strftime('%d/%m') if hasattr(trans.get('data'), 'strftime') else str(trans.get('data', 'N/A'))
                                valor_original = trans.get('valor_original', trans.get('valor', 0))
                                pdf.multi_cell(0, 3, f'  - R$ {valor_original:,.2f} | {data_str} | {pdf.clean_text(trans.get("descricao", "N/A")[:30])}')
                        
                        if contabil_df is not None and 'id' in contabil_df.columns:
                            transacoes_contabil = contabil_df[contabil_df['id'].isin(match.get('ids_contabil', []))]
                            pdf.multi_cell(0, 4, f'Lan√ßamentos cont√°beis: {len(transacoes_contabil)}')
                            for _, lanc in transacoes_contabil.iterrows():
                                data_str = lanc['data'].strftime('%d/%m') if hasattr(lanc.get('data'), 'strftime') else str(lanc.get('data', 'N/A'))
                                valor_original = lanc.get('valor_original', lanc.get('valor', 0))
                                pdf.multi_cell(0, 3, f'  - R$ {valor_original:,.2f} | {data_str} | {pdf.clean_text(lanc.get("descricao", "N/A")[:30])}')
                    except Exception as e:
                        pdf.multi_cell(0, 4, f'Erro ao carregar detalhes: {str(e)}')
                    
                    pdf.ln(5)

        else:  # RELAT√ìRIO RESUMIDO
            # P√°gina 3: Correspond√™ncias Resumidas
            if resultados_analise.get('matches'):
                pdf.add_page()
                pdf.chapter_title('CORRESPOND√äNCIAS IDENTIFICADAS - VIS√ÉO RESUMIDA')
                
                pdf.set_font('Arial', '', 9)
                pdf.multi_cell(0, 5, f'Total de correspond√™ncias identificadas: {len(resultados_analise["matches"])}')
                
                # Apenas estat√≠sticas resumidas no relat√≥rio resumido
                tipos_match = {
                    '1:1': len([m for m in resultados_analise['matches'] if m.get('tipo_match') == '1:1']),
                    '1:N': len([m for m in resultados_analise['matches'] if m.get('tipo_match') == '1:N']),
                    'N:1': len([m for m in resultados_analise['matches'] if m.get('tipo_match') == 'N:1'])
                }
                
                pdf.multi_cell(0, 5, f'Distribui√ß√£o: 1:1 ({tipos_match["1:1"]}), 1:N ({tipos_match["1:N"]}), N:1 ({tipos_match["N:1"]})')                
                
                if resultados_analise['matches']:
                    pdf.ln(5)
                    pdf.set_font('Arial', 'B', 10)
                    pdf.cell(0, 8, 'TODAS AS CORRESPOND√äNCIAS IDENTIFICADAS:', 0, 1)
                    
                    for i, match in enumerate(resultados_analise['matches']):
                        pdf.set_font('Arial', 'B', 9)
                        pdf.cell(0, 6, f'{i+1}. {match.get("tipo_match", "N/A")} - Confian√ßa: {match.get("confianca", 0)}% - Valor: R$ {match.get("valor_total", 0):.2f}', 0, 1)
                        pdf.set_font('Arial', '', 8)
                        pdf.multi_cell(0, 4, f'   {pdf.clean_text(match.get("explicacao", "Sem explica√ß√£o")[:100])}...')
                        pdf.ln(2)

                
        
        # P√°gina de Diverg√™ncias
        if divergencias_tabela is not None and not divergencias_tabela.empty:
            try:
                pdf.add_page()
                
                if formato == 'completo':
                    pdf.chapter_title('DIVERG√äNCIAS IDENTIFICADAS - AN√ÅLISE COMPLETA')
                else:
                    pdf.chapter_title('DIVERG√äNCIAS IDENTIFICADAS - RESUMO')
                
                # Separar as diverg√™ncias por tipo com tratamento seguro
                transacoes_sem_correspondencia = pd.DataFrame()
                lancamentos_sem_correspondencia = pd.DataFrame()
                similaridades = pd.DataFrame()
                
                if 'Origem' in divergencias_tabela.columns:
                    transacoes_sem_correspondencia = divergencias_tabela[
                        divergencias_tabela['Origem'] == 'Extrato Banc√°rio'
                    ]
                    lancamentos_sem_correspondencia = divergencias_tabela[
                        divergencias_tabela['Origem'] == 'Sistema Cont√°bil'
                    ]
                
                if 'Similaridade' in divergencias_tabela.columns:
                    similaridades = divergencias_tabela[
                        divergencias_tabela['Similaridade'].notna()
                    ]
                
                # Tabela 1: Transa√ß√µes Banc√°rias sem Correspond√™ncia
                if not transacoes_sem_correspondencia.empty:
                    pdf.set_font('Arial', 'B', 12)
                    pdf.cell(0, 10, 'TRANSA√á√ïES BANC√ÅRIAS SEM CORRESPOND√äNCIA:', 0, 1)
                    
                    headers = ['Data', 'Valor', 'Descri√ß√£o', 'Status']
                    col_widths = [25, 25, 80, 30]
                    
                    pdf.set_font('Arial', 'B', 8)
                    for i, header in enumerate(headers):
                        pdf.cell(col_widths[i], 8, header, 1, 0, 'C')
                    pdf.ln()
                    
                    pdf.set_font('Arial', '', 7)
                    for _, row in transacoes_sem_correspondencia.head(20).iterrows():  # Limitar a 20 itens
                        pdf.cell(col_widths[0], 6, str(row.get('Data', '')), 1, 0, 'C')
                        pdf.cell(col_widths[1], 6, str(row.get('Valor', '')), 1, 0, 'C')
                        pdf.cell(col_widths[2], 6, pdf.clean_text(str(row.get('Descri√ß√£o', ''))[:40]), 1, 0, 'L')
                        pdf.cell(col_widths[3], 6, str(row.get('Status', '')), 1, 0, 'C')
                        pdf.ln()
                    
                    pdf.ln(5)
                    pdf.set_font('Arial', 'I', 8)
                    pdf.cell(0, 6, f'Total de transa√ß√µes sem correspond√™ncia: {len(transacoes_sem_correspondencia)}', 0, 1)
                    pdf.ln(5)
                
                # Tabela 2: Lan√ßamentos Cont√°beis sem Correspond√™ncia
                if not lancamentos_sem_correspondencia.empty:
                    pdf.set_font('Arial', 'B', 12)
                    pdf.cell(0, 10, 'LAN√áAMENTOS CONT√ÅBEIS SEM MOVIMENTA√á√ÉO BANC√ÅRIA:', 0, 1)
                    
                    headers = ['Data', 'Valor', 'Descri√ß√£o', 'Status']
                    col_widths = [25, 25, 80, 30]
                    
                    pdf.set_font('Arial', 'B', 8)
                    for i, header in enumerate(headers):
                        pdf.cell(col_widths[i], 8, header, 1, 0, 'C')
                    pdf.ln()
                    
                    pdf.set_font('Arial', '', 7)
                    for _, row in lancamentos_sem_correspondencia.head(20).iterrows():  # Limitar a 20 itens
                        pdf.cell(col_widths[0], 6, str(row.get('Data', '')), 1, 0, 'C')
                        pdf.cell(col_widths[1], 6, str(row.get('Valor', '')), 1, 0, 'C')
                        pdf.cell(col_widths[2], 6, pdf.clean_text(str(row.get('Descri√ß√£o', ''))[:40]), 1, 0, 'L')
                        pdf.cell(col_widths[3], 6, str(row.get('Status', '')), 1, 0, 'C')
                        pdf.ln()
                    
                    pdf.ln(5)
                    pdf.set_font('Arial', 'I', 8)
                    pdf.cell(0, 6, f'Total de lan√ßamentos sem correspond√™ncia: {len(lancamentos_sem_correspondencia)}', 0, 1)
                    pdf.ln(5)
                
                # Tabela 3: Similaridades
                if not similaridades.empty:
                    pdf.set_font('Arial', 'B', 12)
                    pdf.cell(0, 10, 'POSS√çVEIS CORRESPOND√äNCIAS POR SIMILARIDADE:', 0, 1)
                    
                    # Layout otimizado para texto completo
                    headers = ['Similaridade', 'Valor Banc√°rio', 'Descri√ß√£o Banc√°ria', 'Valor Cont√°bil', 'Descri√ß√£o Cont√°bil', 'Diferen√ßa']
                    col_widths = [18, 24, 50, 24, 50, 16]
                    
                    pdf.set_font('Arial', 'B', 8)
                    for i, header in enumerate(headers):
                        pdf.cell(col_widths[i], 8, header, 1, 0, 'C')
                    pdf.ln()
                    
                    pdf.set_font('Arial', '', 7)
                    for _, row in similaridades.head(10).iterrows():  # Reduzir para 10 itens para caber texto completo
                        # Similaridade
                        pdf.cell(col_widths[0], 6, str(row.get('Similaridade', '')), 1, 0, 'C')
                        
                        # Valor Banc√°rio
                        pdf.cell(col_widths[1], 6, str(row.get('Valor_Banc√°rio', '')), 1, 0, 'C')
                        
                        # Descri√ß√£o Banc√°ria COMPLETA
                        desc_bancario = pdf.clean_text(str(row.get('Descri√ß√£o_Banc√°rio', '')))
                        # N√£o truncar - deixar texto completo
                        pdf.cell(col_widths[2], 6, desc_bancario, 1, 0, 'L')
                        
                        # Valor Cont√°bil
                        pdf.cell(col_widths[3], 6, str(row.get('Valor_Cont√°bil', '')), 1, 0, 'C')
                        
                        # Descri√ß√£o Cont√°bil COMPLETA
                        desc_contabil = pdf.clean_text(str(row.get('Descri√ß√£o_Cont√°bil', '')))
                        # N√£o truncar - deixar texto completo
                        pdf.cell(col_widths[4], 6, desc_contabil, 1, 0, 'L')
                        
                        # Diferen√ßa
                        pdf.cell(col_widths[5], 6, str(row.get('Diferen√ßa_Valor', '')), 1, 0, 'C')
                        pdf.ln()
                    
                    pdf.ln(5)
                    pdf.set_font('Arial', 'I', 8)
                    pdf.cell(0, 6, f'Total de poss√≠veis correspond√™ncias: {len(similaridades)} (mostrando 10 principais)', 0, 1)
                                    

            except Exception as e:
                print(f"‚ö†Ô∏è Erro na se√ß√£o de diverg√™ncias: {e}")
                pdf.add_page()
                pdf.chapter_title('ERRO NA GERA√á√ÉO DE DIVERG√äNCIAS')
                pdf.multi_cell(0, 8, f"N√£o foi poss√≠vel gerar a se√ß√£o de diverg√™ncias: {str(e)}")
        
        # P√°gina: Recomenda√ß√µes (comum para ambos)
        pdf.add_page()
        pdf.chapter_title('RECOMENDA√á√ïES E PR√ìXIMOS PASSOS')
        
        if formato == 'completo':
            recomendacoes_texto = """
            RECOMENDA√á√ïES PARA CONCILIA√á√ÉO MANUAL:
            
            1. VALIDAR CORRESPOND√äNCIAS IDENTIFICADAS
               - Confirmar cada correspond√™ncia proposta
               - Verificar se as rela√ß√µes fazem sentido comercial
               - Validar valores e datas
            
            2. INVESTIGAR DIVERG√äNCIAS
               - Analisar transa√ß√µes sem correspond√™ncia
               - Verificar lan√ßamentos sem movimento banc√°rio
               - Identificar poss√≠veis erros de lan√ßamento
            
            3. AJUSTES NECESS√ÅRIOS
               - Corrigir lan√ßamentos incorretos
               - Incluir transa√ß√µes omitidas
               - Ajustar classifica√ß√µes cont√°beis
            
            4. DOCUMENTA√á√ÉO
               - Manter registro das valida√ß√µes realizadas
               - Documentar ajustes feitos
               - Arquivar este relat√≥rio de an√°lise
            """
        else:
            recomendacoes_texto = """
            PR√ìXIMOS PASSOS RECOMENDADOS:
            
            ‚Ä¢ Validar correspond√™ncias identificadas
            ‚Ä¢ Investigar diverg√™ncias cr√≠ticas
            ‚Ä¢ Ajustar lan√ßamentos conforme necess√°rio
            ‚Ä¢ Documentar processo de concilia√ß√£o
            
            PARA AN√ÅLISE DETALHADA:
            Consulte o relat√≥rio completo para:
            - Tabelas detalhadas de correspond√™ncias
            - An√°lise completa de diverg√™ncias
            - Detalhes t√©cnicos da an√°lise
            """
        
        # INCLUIR OBSERVA√á√ïES NAS RECOMENDA√á√ïES SE HOUVER
        if observacoes and observacoes.strip():
            recomendacoes_texto += f"""
            
            OBSERVA√á√ïES E CONTEXTO INFORMADO:
            {observacoes}
            """
        
        recomendacoes_texto += """
        
        OBSERVA√á√ïES IMPORTANTES:
        - Este relat√≥rio √© uma FERRAMENTA DE AUX√çLIO
        - Todas as correspond√™ncias devem ser VALIDADAS MANUALMENTE
        - A responsabilidade final pela concilia√ß√£o √© do contador
        - Mantenha documenta√ß√£o adequada para auditoria
        """
        
        pdf.chapter_body(recomendacoes_texto)

        # Na p√°gina final: Incluir conta nas informa√ß√µes de auditoria
        pdf.add_page()
        pdf.chapter_title('INFORMA√á√ïES DE AUDITORIA')
        
        auditoria_texto = f"""
        INFORMA√á√ïES PARA AUDITORIA:
        
        - Conta analisada: {conta_analisada if conta_analisada else "N√£o especificada"}
        - Empresa: {empresa_nome}
        - Per√≠odo: {periodo}
        - Analista: {contador_nome}
        - Data de gera√ß√£o: {datetime.now().strftime("%d/%m/%Y %H:%M")}
        - Total de transa√ß√µes: {total_extrato}
        - Total de lan√ßamentos: {total_contabil}
        - Correspond√™ncias identificadas: {total_matches}
        - Diverg√™ncias: {total_excecoes}
        """
        
        # INCLUIR OBSERVA√á√ïES NA AUDITORIA SE HOUVER
        if observacoes and observacoes.strip():
            auditoria_texto += f"""
        - Observa√ß√µes: {observacoes[:200]}{'...' if len(observacoes) > 200 else ''}
            """
        
        auditoria_texto += """
        
        Este relat√≥rio foi gerado automaticamente pelo Sistema de Concilia√ß√£o Banc√°ria e deve ser arquivado junto
        com a documenta√ß√£o cont√°bil do per√≠odo.
        """
        
        pdf.chapter_body(auditoria_texto)
        
        # Assinatura
        pdf.ln(15)
        pdf.set_font('Arial', '', 10)
        pdf.cell(0, 8, '_________________________', 0, 1, 'C')
        pdf.cell(0, 8, pdf.clean_text(contador_nome), 0, 1, 'C')
        pdf.cell(0, 8, 'Contador Respons√°vel', 0, 1, 'C')
        
        # Salvar PDF
        temp_dir = tempfile.gettempdir()
        pdf_path = os.path.join(temp_dir, f'relatorio_analise_{formato}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf')
        
        try:
            pdf.output(pdf_path)
            print(f"‚úÖ RELAT√ìRIO GERADO COM SUCESSO: {pdf_path}")
            return pdf_path
            
        except Exception as e:
            print(f"‚ùå ERRO CR√çTICO ao salvar PDF: {str(e)}")
            print(f"üîç Stack trace: {traceback.format_exc()}")
            
            # Tentar fallback
            return _gerar_relatorio_fallback(empresa_nome, contador_nome, str(e))
            
    except Exception as e:
        # Log de erro mais detalhado
        print(f"‚ùå ERRO CR√çTICO ao gerar relat√≥rio: {str(e)}")
        print(f"üîç Stack trace: {traceback.format_exc()}")
        
        # Criar relat√≥rio de fallback
        return _gerar_relatorio_fallback(empresa_nome, contador_nome, str(e))

def _abreviar_tipo_divergencia(tipo_original):
    """Abrevia tipos longos de diverg√™ncia para melhor visualiza√ß√£o na tabela - TERMINOLOGIA MELHORADA"""
    abreviacoes = {
        'MOVIMENTA√á√ÉO_BANC√ÅRIA_SEM_LAN√áAMENTO': 'Mov. Banc√°ria s/Lan√ßamento',
        'LAN√áAMENTO_CONT√ÅBIL_SEM_MOVIMENTA√á√ÉO': 'Lan√ßamento s/Mov. Banc√°ria',
        'DIFEREN√áA_DE_SALDO': 'Dif. Saldo',
        'TRANSA√á√ÉO_SEM_CORRESPOND√äNCIA': 'Transa√ß√£o s/Correspond√™ncia',
        'LAN√áAMENTO_SEM_CORRESPOND√äNCIA': 'Lan√ßamento s/Correspond√™ncia'
    }
    return abreviacoes.get(tipo_original, tipo_original)