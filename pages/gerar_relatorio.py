# pages/4_üìÑ_gerar_relatorio.py
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import tempfile
import os
import base64
import modules.report_generator as report_gen

st.set_page_config(page_title="Gerar Relat√≥rio", page_icon="üìÑ", layout="wide")

st.title("üìÑ Gerar Relat√≥rio de Concilia√ß√£o")
st.markdown("Gere o relat√≥rio PDF final com todas as concilia√ß√µes aprovadas")

# Verificar se h√° dados para relat√≥rio
if 'matches_aprovados' not in st.session_state or len(st.session_state['matches_aprovados']) == 0:
    st.error("‚ùå Nenhuma concilia√ß√£o aprovada para gerar relat√≥rio.")
    st.info("Volte para a p√°gina de revis√£o para aprovar concilia√ß√µes.")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üìã Voltar para Revis√£o"):
            st.switch_page("pages/revisao_resultados.py")
    with col2:
        if st.button("üîç Fazer Nova An√°lise"):
            st.switch_page("pages/analise_dados.py")
    st.stop()

# Dados para o relat√≥rio
matches_aprovados = st.session_state['matches_aprovados']
matches_rejeitados = st.session_state.get('matches_rejeitados', [])
excecoes = st.session_state.get('resultados_analise', {}).get('excecoes', [])
extrato_df = st.session_state['extrato_df']
contabil_df = st.session_state['contabil_df']

# Configura√ß√µes do relat√≥rio
st.sidebar.header("‚öôÔ∏è Configura√ß√µes do Relat√≥rio")

empresa_nome = st.sidebar.text_input("Nome da Empresa", "Empresa Exemplo Ltda")
contador_nome = st.sidebar.text_input("Nome do Contador", "Contador Responsavel")
periodo_relatorio = st.sidebar.text_input("Per√≠odo do Relat√≥rio", 
                                         f"{datetime.now().strftime('%B/%Y')}")

incluir_rejeitados = st.sidebar.checkbox("Incluir matches rejeitados no ap√™ndice", True)
incluir_excecoes = st.sidebar.checkbox("Incluir an√°lise de exce√ß√µes", True)

# Pr√©-visualiza√ß√£o do relat√≥rio
st.header("üìã Pr√©-visualiza√ß√£o do Relat√≥rio")

# M√©tricas do relat√≥rio
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("Concilia√ß√µes Aprovadas", len(matches_aprovados))

with col2:
    valor_total = sum(match['valor_total'] for match in matches_aprovados)
    st.metric("Valor Total Conciliado", f"R$ {valor_total:,.2f}")

with col3:
    total_analisado = len(matches_aprovados) + len(matches_rejeitados)
    taxa_aprovacao = (len(matches_aprovados) / total_analisado * 100) if total_analisado > 0 else 0
    st.metric("Taxa de Aprova√ß√£o", f"{taxa_aprovacao:.1f}%")

with col4:
    st.metric("Exce√ß√µes Identificadas", len(excecoes))

# Sum√°rio executivo
st.subheader("üìä Sum√°rio Executivo")

aba_sumario, aba_detalhes, aba_excecoes = st.tabs(["üìà Vis√£o Geral", "üîç Detalhes", "‚ö†Ô∏è Exce√ß√µes"])

with aba_sumario:
    col_a, col_b = st.columns(2)
    
    with col_a:
        st.markdown("**Distribui√ß√£o por Camada de Matching**")
        camadas_data = {
            'Camada': ['Exata', 'Heur√≠stica', 'IA'],
            'Quantidade': [
                len([m for m in matches_aprovados if m['camada'] == 'exata']),
                len([m for m in matches_aprovados if m['camada'] == 'heuristica']),
                len([m for m in matches_aprovados if m['camada'] == 'ia'])
            ]
        }
        st.bar_chart(pd.DataFrame(camadas_data).set_index('Camada'))
    
    with col_b:
        st.markdown("**Tipos de Concilia√ß√£o**")
        tipos_data = {
            'Tipo': ['1:1', '1:N', 'N:1'],
            'Quantidade': [
                len([m for m in matches_aprovados if m['tipo_match'] == '1:1']),
                len([m for m in matches_aprovados if m['tipo_match'] == '1:N']),
                len([m for m in matches_aprovados if m['tipo_match'] == 'N:1'])
            ]
        }
        st.bar_chart(pd.DataFrame(tipos_data).set_index('Tipo'))

with aba_detalhes:
    # Tabela de concilia√ß√µes aprovadas
    st.markdown("**Concilia√ß√µes Aprovadas**")
    
    dados_tabela = []
    for i, match in enumerate(matches_aprovados):
        transacoes_extrato = extrato_df[extrato_df['id'].isin(match['ids_extrato'])]
        transacoes_contabil = contabil_df[contabil_df['id'].isin(match['ids_contabil'])]
        
        dados_tabela.append({
            'ID': i + 1,
            'Tipo': match['tipo_match'],
            'Camada': match['camada'],
            'Confian√ßa': f"{match['confianca']}%",
            'Valor Total': f"R$ {match['valor_total']:,.2f}",
            'Transa√ß√µes Banco': len(match['ids_extrato']),
            'Lan√ßamentos': len(match['ids_contabil']),
            'Explica√ß√£o': match['explicacao'][:80] + "..." if len(match['explicacao']) > 80 else match['explicacao']
        })
    
    if dados_tabela:
        st.dataframe(pd.DataFrame(dados_tabela), use_container_width=True)
    else:
        st.info("Nenhuma concilia√ß√£o aprovada para mostrar.")

with aba_excecoes:
    if excecoes:
        st.markdown("**Exce√ß√µes e Diverg√™ncias**")
        
        for excecao in excecoes:
            with st.expander(f"{excecao['tipo']} - {excecao['severidade']}"):
                st.write(f"**Descri√ß√£o:** {excecao['descricao']}")
                st.write(f"**A√ß√£o Sugerida:** {excecao['acao_sugerida']}")
                st.write(f"**Transa√ß√µes Envolvidas:** {len(excecao['ids_envolvidos'])}")
    else:
        st.success("‚úÖ Nenhuma exce√ß√£o cr√≠tica identificada.")

# Gera√ß√£o do PDF
st.divider()
st.header("üéØ Gerar Relat√≥rio PDF")

col_gerar1, col_gerar2 = st.columns([2, 1])

with col_gerar1:
    st.subheader("Configura√ß√µes Finais")
    
    observacoes = st.text_area(
        "Observa√ß√µes Adicionais para o Relat√≥rio:",
        placeholder="Ex: Considera√ß√µes especiais, ressalvas, recomenda√ß√µes...",
        height=100
    )
    
    formato_relatorio = st.selectbox(
        "Formato do Relat√≥rio",
        ["Completo", "Resumido", "Executivo"],
        index=0  # Padr√£o: Completo
    )
    
    # Descri√ß√£o dos formatos
    with st.expander("‚ÑπÔ∏è Sobre os Formatos de Relat√≥rio"):
        st.markdown("""
        **üìÑ COMPLETO:** 
        - Todas as concilia√ß√µes detalhadas
        - An√°lise completa de exce√ß√µes
        - Matches rejeitados
        - Recomenda√ß√µes detalhadas
        - 4-5 p√°ginas
        
        **üìã RESUMIDO:**
        - Apenas informa√ß√µes essenciais
        - Tabela resumida de concilia√ß√µes
        - Recomenda√ß√µes b√°sicas
        - 2-3 p√°ginas
        
        **üéØ EXECUTIVO:**
        - Foco em m√©tricas e KPIs
        - Vis√£o para tomada de decis√£o
        - Principais concilia√ß√µes por valor
        - Recomenda√ß√µes estrat√©gicas
        - 2 p√°ginas
        """)

with col_gerar2:
    st.subheader("Gerar PDF")
    
    if st.button("üìÑ Gerar Relat√≥rio PDF", type="primary", use_container_width=True):
        with st.spinner("Gerando relat√≥rio PDF..."):
            try:
                # Mostrar qual formato est√° sendo gerado
                st.info(f"üîÑ Gerando relat√≥rio no formato: **{formato_relatorio}**")
                
                # Preparar dados com base nas configura√ß√µes
                matches_rejeitados_final = matches_rejeitados if incluir_rejeitados else []
                excecoes_final = excecoes if incluir_excecoes else []
                
                # Chamar a fun√ß√£o correta baseada no formato selecionado
                if formato_relatorio == "Resumido":
                    pdf_path = report_gen.gerar_relatorio_resumido(
                        matches_aprovados=matches_aprovados,
                        matches_rejeitados=matches_rejeitados_final,
                        excecoes=excecoes_final,
                        extrato_df=extrato_df,
                        contabil_df=contabil_df,
                        empresa_nome=empresa_nome,
                        contador_nome=contador_nome,
                        periodo=periodo_relatorio,
                        observacoes=observacoes
                    )
                    success_message = "‚úÖ Relat√≥rio **RESUMIDO** gerado com sucesso!"
                    
                elif formato_relatorio == "Executivo":
                    pdf_path = report_gen.gerar_relatorio_executivo(
                        matches_aprovados=matches_aprovados,
                        matches_rejeitados=matches_rejeitados_final,
                        excecoes=excecoes_final,
                        extrato_df=extrato_df,
                        contabil_df=contabil_df,
                        empresa_nome=empresa_nome,
                        contador_nome=contador_nome,
                        periodo=periodo_relatorio,
                        observacoes=observacoes
                    )
                    success_message = "‚úÖ Relat√≥rio **EXECUTIVO** gerado com sucesso!"
                    
                else:  # Completo (padr√£o)
                    pdf_path = report_gen.gerar_relatorio_completo(
                        matches_aprovados=matches_aprovados,
                        matches_rejeitados=matches_rejeitados_final,
                        excecoes=excecoes_final,
                        extrato_df=extrato_df,
                        contabil_df=contabil_df,
                        empresa_nome=empresa_nome,
                        contador_nome=contador_nome,
                        periodo=periodo_relatorio,
                        observacoes=observacoes,
                        formato="completo"
                    )
                    success_message = "‚úÖ Relat√≥rio **COMPLETO** gerado com sucesso!"
                
                # Ler o PDF gerado
                with open(pdf_path, "rb") as pdf_file:
                    pdf_bytes = pdf_file.read()
                
                # Criar download link
                b64_pdf = base64.b64encode(pdf_bytes).decode()
                href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="relatorio_conciliacao_{formato_relatorio.lower()}_{datetime.now().strftime("%Y%m%d_%H%M")}.pdf" style="background-color: #4CAF50; color: white; padding: 14px 20px; text-align: center; text-decoration: none; display: inline-block; border-radius: 5px; font-size: 16px;">üì• Baixar Relat√≥rio {formato_relatorio.upper()}</a>'
                
                st.markdown(href, unsafe_allow_html=True)
                st.success(success_message)
                
                # Pr√©-visualiza√ß√£o embutida
                st.subheader("üëÅÔ∏è Pr√©-visualiza√ß√£o do PDF")
                base64_pdf = base64.b64encode(pdf_bytes).decode('utf-8')
                pdf_display = f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="100%" height="600" type="application/pdf"></iframe>'
                st.markdown(pdf_display, unsafe_allow_html=True)
                
            except Exception as e:
                st.error(f"‚ùå Erro ao gerar relat√≥rio: {str(e)}")
                st.info("üí° **Dica:** Verifique se h√° caracteres especiais problem√°ticos nos dados.")

# Navega√ß√£o e a√ß√µes finais
st.divider()
st.header("üö™ Pr√≥ximas A√ß√µes")

col_acao1, col_acao2, col_acao3 = st.columns(3)

with col_acao1:
    if st.button("üìã Revisar Novamente", use_container_width=True):
        st.switch_page("pages/revisao_resultados.py")

with col_acao2:
    if st.button("üîÑ Nova An√°lise", use_container_width=True):
        # Limpar session state para nova an√°lise
        keys_to_clear = ['matches_aprovados', 'matches_rejeitados', 'matches_pendentes', 
                        'resultados_analise']
        for key in keys_to_clear:
            if key in st.session_state:
                del st.session_state[key]
        st.switch_page("pages/importacao_dados.py")

with col_acao3:
    if st.button("üè† In√≠cio", use_container_width=True):
        st.switch_page("app.py")

# Resumo do processo
with st.expander("üìã Resumo do Processo Conclu√≠do"):
    st.markdown(f"""
    **Processo de Concilia√ß√£o Finalizado**
    
    - ‚úÖ **Arquivos Importados:** {len(extrato_df)} transa√ß√µes banc√°rias + {len(contabil_df)} lan√ßamentos
    - ‚úÖ **An√°lise Realizada:** {len(matches_aprovados)} concilia√ß√µes aprovadas
    - ‚úÖ **Revis√£o Conclu√≠da:** {len(matches_rejeitados)} concilia√ß√µes rejeitadas
    - ‚úÖ **Relat√≥rio Gerado:** PDF profissional dispon√≠vel para download
    
    **Pr√≥ximos passos recomendados:**
    1. Salve o relat√≥rio PDF nos arquivos da empresa
    2. Encaminhe para o departamento cont√°bil
    3. Execute as a√ß√µes recomendadas para as exce√ß√µes
    4. Agende a pr√≥xima concilia√ß√£o
    """)