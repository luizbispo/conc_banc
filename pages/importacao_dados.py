# pages/1_üì•_importacao_dados.py
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import io
import requests
import re
from urllib.parse import urlparse
import modules.data_processor as processor


# --- Menu Customizado ---
with st.sidebar:
    st.markdown("### Navega√ß√£o Principal") 
    st.page_link("app.py", label="In√≠cio (Home)", icon="üè†")
    
    st.page_link("pages/importacao_dados.py", label="üì• Importa√ß√£o de Dados", icon=None)
    st.page_link("pages/analise_dados.py", label="üìä An√°lise de Diverg√™ncias", icon=None)
    st.page_link("pages/gerar_relatorio.py", label="üìù Relat√≥rio Final", icon=None)
# --- Fim do Menu Customizado ---

st.set_page_config(page_title="Importa√ß√£o de Dados", page_icon="üì•", layout="wide")

st.title("üì• Importa√ß√£o de Dados para Concilia√ß√£o")
st.markdown("Escolha o m√©todo de importa√ß√£o e siga as instru√ß√µes para carregar seus dados")

# nstru√ß√µes
with st.expander(" Guia Completo de Importa√ß√£o"):
    st.markdown("""
    ##  M√©todos de Importa√ß√£o Recomendados
    
    ###  Upload de Arquivos (RECOMENDADO)
    **Quando usar:** Testes iniciais, arquivos locais
    **Vantagens:** 
    - Mais confi√°vel
    - Funciona offline
    - Processamento r√°pido
    
    ###  Link de Pastas (EXPERIMENTAL)
    **Quando usar:** Arquivos j√° organizados em pastas na nuvem
    **Pr√©-requisitos:**
    - Pastas compartilhadas publicamente
    - Arquivos com nomes padronizados
    - Acesso √† internet
    
    ##  Formata√ß√£o dos Arquivos
    
    ### Extrato Banc√°rio
    ```csv
    Data,Valor,Descri√ß√£o
    2024-01-15,1500.00,Dep√≥sito Cliente A
    2024-01-16,-250.00,Pagamento Fornecedor B
    ```
    
    ### Lan√ßamentos Cont√°beis  
    ```csv
    Data,Valor,Descri√ß√£o,Conta D√©bito,Conta Cr√©dito
    2024-01-15,1500.00,Receita Venda,1.01.01,3.01.01
    2024-01-16,250.00,Despesa Fornecedor,4.01.01,1.01.01
    ```
    
    ## üîß Solu√ß√£o de Problemas
    
    **‚ùå Erro ao carregar arquivos:**
    - Verifique o formato (CSV/Excel)
    - Confirme que o arquivo n√£o est√° corrompido
    - Tente salvar como CSV UTF-8
    
    **‚ùå Nenhum arquivo encontrado na nuvem:**
    - Verifique se a pasta est√° compartilhada publicamente
    - Confirme os nomes dos arquivos
    - Use o m√©todo de Upload como alternativa
    """)

# Inicializar session state
if 'extrato_df' not in st.session_state:
    st.session_state.extrato_df = None
if 'contabil_df' not in st.session_state:
    st.session_state.contabil_df = None
if 'dados_carregados' not in st.session_state:
    st.session_state.dados_carregados = False

# Sidebar com instru√ß√µes
st.sidebar.header("üìã Instru√ß√µes Gerais")

st.sidebar.markdown("""
**üìä Dados Necess√°rios:**
1. **Extrato Banc√°rio** - Transa√ß√µes do banco
2. **Lan√ßamentos Cont√°beis** - Registros do sistema cont√°bil

**‚è∞ Per√≠odo:** Ambos devem ser do mesmo m√™s
""")

# Sele√ß√£o do m√©todo de importa√ß√£o
st.sidebar.header("üîß M√©todo de Importa√ß√£o")
metodo_importacao = st.sidebar.radio(
    "Como deseja importar os dados?",
    ["üì§ Upload de Arquivos", "‚òÅÔ∏è Link de Pastas na Nuvem", "üîó Links Diretos para Arquivos"],
    index=0
)

if metodo_importacao == "üì§ Upload de Arquivos":
    st.header("üì§ Upload de Arquivos Locais")
    
    st.info("""
    **Recomendado para:** Testes r√°pidos e quando os arquivos est√£o no seu computador
    **Formatos suportados:** CSV, Excel (.xlsx, .xls)
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üè¶ Extrato Banc√°rio")
        extrato_file = st.file_uploader(
            "Selecione o arquivo do extrato banc√°rio:",
            type=['csv', 'xlsx', 'xls'],
            key="extrato_upload",
            help="Arquivo CSV ou Excel com as transa√ß√µes banc√°rias"
        )
        
        if extrato_file is not None:
            try:
                if extrato_file.name.endswith('.csv'):
                    extrato_df = pd.read_csv(extrato_file)
                else:
                    extrato_df = pd.read_excel(extrato_file)
                
                st.session_state.extrato_df = extrato_df
                st.success(f"‚úÖ Extrato carregado: {len(extrato_df)} transa√ß√µes")
                st.dataframe(extrato_df.head(), width='stretch')
                
            except Exception as e:
                st.error(f"‚ùå Erro ao carregar extrato: {e}")
    
    with col2:
        st.subheader("üìä Lan√ßamentos Cont√°beis")
        contabil_file = st.file_uploader(
            "Selecione o arquivo dos lan√ßamentos cont√°beis:",
            type=['csv', 'xlsx', 'xls'],
            key="contabil_upload",
            help="Arquivo CSV ou Excel com os lan√ßamentos do sistema cont√°bil"
        )
        
        if contabil_file is not None:
            try:
                if contabil_file.name.endswith('.csv'):
                    contabil_df = pd.read_csv(contabil_file)
                else:
                    contabil_df = pd.read_excel(contabil_file)
                
                st.session_state.contabil_df = contabil_df
                st.success(f"‚úÖ Lan√ßamentos carregados: {len(contabil_df)} registros")
                st.dataframe(contabil_df.head(), width='stretch')
                
            except Exception as e:
                st.error(f"‚ùå Erro ao carregar lan√ßamentos: {e}")

elif metodo_importacao == "‚òÅÔ∏è Link de Pastas na Nuvem":
    st.header("‚òÅÔ∏è Importa√ß√£o por Link de Pastas")
    
    st.warning("""
    **‚ö†Ô∏è Funcionalidade Experimental**
    Esta funcionalidade est√° em desenvolvimento e pode n√£o funcionar em todos os casos.
    Se encontrar problemas, use o m√©todo de Upload de Arquivos.
    """)
    
    st.success("""
    **‚úÖ Funciona melhor com:**
    - Google Drive (pastas compartilhadas)
    - SharePoint Online
    - Arquivos com nomes padronizados
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìÅ Pasta dos Extratos")
        
        pasta_extratos = st.text_input(
            "Link da pasta com os extratos:",
            placeholder="https://drive.google.com/... OU https://sharepoint.com/...",
            key="pasta_extratos",
            help="Cole o link completo da pasta (n√£o do arquivo)"
        )
        
        st.markdown("**üìÑ O sistema procurar√° por:**")
        st.code("extrato_bancario_JANEIRO.csv")
        st.code("extrato_JANEIRO.xlsx")
        st.code("extrato_banco_JANEIRO.csv")
        
        mes_extrato = st.selectbox(
            "M√™s dos extratos:",
            ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
             "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
            key="mes_extrato"
        )

    with col2:
        st.subheader("üìÅ Pasta dos Lan√ßamentos")
        
        pasta_contabil = st.text_input(
            "Link da pasta com os lan√ßamentos:",
            placeholder="https://drive.google.com/... OU https://sharepoint.com/...",
            key="pasta_contabil",
            help="Cole o link completo da pasta (n√£o do arquivo)"
        )
        
        st.markdown("**üìÑ O sistema procurar√° por:**")
        st.code("contabil_JANEIRO.csv")
        st.code("lancamentos_JANEIRO.xlsx")
        st.code("contabilidade_JANEIRO.csv")
        
        mes_contabil = st.selectbox(
            "M√™s dos lan√ßamentos:",
            ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
             "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
            key="mes_contabil"
        )
    
    # Bot√£o para importar
    if st.button("üîç Procurar e Importar das Pastas", type="primary", width='stretch'):
        if pasta_extratos:
            with st.spinner(f"Procurando extratos de {mes_extrato}..."):
                try:
                    extrato_df = processor.importar_de_pasta_cloud(
                        folder_url=pasta_extratos,
                        padrao_nome=r".*extrato.*\.(csv|xlsx|xls)$",
                        mes_referencia=mes_extrato,
                        tipo_arquivo="extratos banc√°rios"
                    )
                    
                    if extrato_df is not None:
                        st.session_state.extrato_df = extrato_df
                        st.success(f"‚úÖ Extratos importados: {len(extrato_df)} transa√ß√µes")
                        st.dataframe(extrato_df.head(), width='stretch')
                    else:
                        st.error(f"‚ùå Nenhum extrato encontrado")
                        st.info("üí° Dica: Verifique se os arquivos est√£o nomeados corretamente")
                        
                except Exception as e:
                    st.error(f"‚ùå Erro: {e}")
        
        if pasta_contabil:
            with st.spinner(f"Procurando lan√ßamentos de {mes_contabil}..."):
                try:
                    contabil_df = processor.importar_de_pasta_cloud(
                        folder_url=pasta_contabil,
                        padrao_nome=r".*(contabil|lancamento).*\.(csv|xlsx|xls)$",
                        mes_referencia=mes_contabil,
                        tipo_arquivo="lan√ßamentos cont√°beis"
                    )
                    
                    if contabil_df is not None:
                        st.session_state.contabil_df = contabil_df
                        st.success(f"‚úÖ Lan√ßamentos importados: {len(contabil_df)} registros")
                        st.dataframe(contabil_df.head(), width='stretch')
                    else:
                        st.error(f"‚ùå Nenhum lan√ßamento encontrado")
                        st.info("üí° Dica: Verifique se os arquivos est√£o nomeados corretamente")
                        
                except Exception as e:
                    st.error(f"‚ùå Erro: {e}")

else:  # üîó Links Diretos para Arquivos
    st.header("üîó Links Diretos para Arquivos")
    
    st.info("""
    **Recomendado quando:** Voc√™ tem links diretos para os arquivos espec√≠ficos
    **Funciona com:** Google Drive, SharePoint, OneDrive, Dropbox
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üè¶ Links dos Extratos")
        
        extrato_links = st.text_area(
            "Links diretos para os arquivos de extrato:",
            placeholder="https://drive.google.com/...\nhttps://sharepoint.com/...",
            height=100,
            key="extrato_links",
            help="Um link por linha. Devem ser links diretos para os arquivos."
        )
        
        st.markdown("**üìù Como obter links diretos:**")
        st.markdown("""
        - **Google Drive:** Clique com bot√£o direito ‚Üí "Obter link" ‚Üí "Restrito" ‚Üí "Qualquer pessoa com o link"
        - **SharePoint:** Clique com bot√£o direito ‚Üí "Compartilhar" ‚Üí Copiar link
        """)

    with col2:
        st.subheader("üìä Links dos Lan√ßamentos")
        
        contabil_links = st.text_area(
            "Links diretos para os arquivos cont√°beis:",
            placeholder="https://drive.google.com/...\nhttps://sharepoint.com/...",
            height=100,
            key="contabil_links",
            help="Um link por linha. Devem ser links diretos para os arquivos."
        )
    
    # Esta funcionalidade seria implementada posteriormente
    st.warning("üöß Funcionalidade em desenvolvimento")
    st.info("""
    **Por enquanto, use:**
    - üì§ **Upload de Arquivos** para testes r√°pidos
    - ‚òÅÔ∏è **Link de Pastas** se seus arquivos est√£o em pastas compartilhadas
    """)

# Processamento dos dados (comum para todos os m√©todos)
if st.session_state.extrato_df is not None and st.session_state.contabil_df is not None:
    st.divider()
    st.header("üîß Configura√ß√£o das Colunas")
    
    st.info("""
    **Identifique as colunas correspondentes em seus arquivos:**
    - **Data:** Coluna com as datas das transa√ß√µes
    - **Valor:** Coluna com os valores (positivos para cr√©dito, negativos para d√©bito)  
    - **Descri√ß√£o:** Coluna com a descri√ß√£o/hist√≥rico das transa√ß√µes
    """)
    
    col_config1, col_config2 = st.columns(2)
    
    with col_config1:
        st.markdown("**üè¶ Extrato Banc√°rio**")
        extrato_cols = st.session_state.extrato_df.columns.tolist()
        
        col_data_extrato = st.selectbox("Coluna de Data:", extrato_cols, index=0)
        col_valor_extrato = st.selectbox("Coluna de Valor:", extrato_cols, index=1)
        col_descricao_extrato = st.selectbox("Coluna de Descri√ß√£o:", extrato_cols, index=2)
        
        # Preview
        st.markdown("**Pr√©-visualiza√ß√£o:**")
        st.dataframe(st.session_state.extrato_df[[col_data_extrato, col_valor_extrato, col_descricao_extrato]].head(3))
    
    with col_config2:
        st.markdown("**üìä Lan√ßamentos Cont√°beis**")
        contabil_cols = st.session_state.contabil_df.columns.tolist()
        
        col_data_contabil = st.selectbox("Coluna de Data:", contabil_cols, index=0, key="contabil_data")
        col_valor_contabil = st.selectbox("Coluna de Valor:", contabil_cols, index=1, key="contabil_valor")
        col_descricao_contabil = st.selectbox("Coluna de Descri√ß√£o:", contabil_cols, index=2, key="contabil_desc")
        
        # Preview
        st.markdown("**Pr√©-visualiza√ß√£o:**")
        st.dataframe(st.session_state.contabil_df[[col_data_contabil, col_valor_contabil, col_descricao_contabil]].head(3))
    
    # Processar dados
    if st.button("üîÑ Processar Dados", type="primary", width='stretch'):
        with st.spinner("Processando e padronizando dados..."):
            try:
                # Processar extrato
                extrato_processado = processor.processar_extrato(
                    st.session_state.extrato_df,
                    col_data_extrato,
                    col_valor_extrato,
                    col_descricao_extrato
                )
                
                # Processar lan√ßamentos cont√°beis
                contabil_processado = processor.processar_contabil(
                    st.session_state.contabil_df,
                    col_data_contabil,
                    col_valor_contabil,
                    col_descricao_contabil
                )
                
                # Salvar no session state
                st.session_state.extrato_df = extrato_processado
                st.session_state.contabil_df = contabil_processado
                st.session_state.dados_carregados = True
                
                st.success("‚úÖ Dados processados com sucesso!")
                
                # Mostrar resumo
                col_res1, col_res2 = st.columns(2)
                with col_res1:
                    st.metric("Transa√ß√µes Banc√°rias", len(extrato_processado))
                    st.dataframe(extrato_processado[['data', 'valor', 'descricao']].head(3))
                
                with col_res2:
                    st.metric("Lan√ßamentos Cont√°beis", len(contabil_processado))
                    st.dataframe(contabil_processado[['data', 'valor', 'descricao']].head(3))
                
            except Exception as e:
                st.error(f"‚ùå Erro no processamento: {e}")

# Navega√ß√£o
if st.session_state.dados_carregados:
    st.divider()
    st.success(" Dados prontos para an√°lise!")
    
    col_nav1, col_nav2, col_nav3 = st.columns([1, 2, 1])
    
    with col_nav2:
        if st.button("üîç Ir para An√°lise de Dados", type="primary", width='stretch'):
            st.switch_page("pages/analise_dados.py")

