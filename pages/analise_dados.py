# pages/2_üõ†Ô∏è_analise_dados.py
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import tempfile
import modules.data_analyzer as analyzer
import modules.file_processor as processor

st.set_page_config(page_title="An√°lise de Dados", page_icon="üîç", layout="wide")

st.title("üîç An√°lise para Concilia√ß√£o Banc√°ria")
st.markdown("Aplicando regras de matching para identificar correspond√™ncias")

# Verificar se os dados foram carregados
if not st.session_state.get('extrato_carregado') or not st.session_state.get('contabil_carregado'):
    st.error("‚ùå Dados n√£o carregados. Volte para a p√°gina de importa√ß√£o.")
    if st.button("üì• Ir para Importa√ß√£o de Dados"):
        st.switch_page("pages/importacao_dados.py")
    st.stop()

# Barra de progresso
progress_bar = st.progress(0)
status_text = st.empty()

# Processar dados
status_text.text("üìÇ Lendo arquivos...")
progress_bar.progress(10)

try:
    # Processar extrato banc√°rio
    extrato_df = processor.processar_extrato(st.session_state['caminho_extrato'])
    progress_bar.progress(30)
    
    # Processar lan√ßamentos cont√°beis
    contabil_df = processor.processar_contabeis(st.session_state['caminho_contabil'])
    progress_bar.progress(50)
    
    status_text.text("üîÑ Aplicando regras de concilia√ß√£o...")
    
    # Configura√ß√µes de toler√¢ncia
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes de Matching")
    
    with st.sidebar.expander("üîß Toler√¢ncias"):
        tolerancia_data = st.slider("Toler√¢ncia de Data (dias)", 0, 5, 2)
        tolerancia_valor = st.number_input("Toler√¢ncia de Valor (R$)", 0.0, 10.0, 0.02, 0.01)
        similaridade_minima = st.slider("Similaridade M√≠nima de Texto (%)", 70, 95, 80)
    
    with st.sidebar.expander("üìã Pol√≠ticas"):
        policy_1n = st.checkbox("Permitir 1:N (Parcelamentos)", True)
        policy_n1 = st.checkbox("Permitir N:1 (Consolida√ß√µes)", True)
        considerar_taxas = st.checkbox("Considerar Taxas/IOF no matching", True)
    
    # Executar an√°lise em camadas
    status_text.text("üéØ Camada 1/3: Matching Exato...")
    resultados_exato = analyzer.matching_exato(extrato_df, contabil_df)
    progress_bar.progress(60)
    
    status_text.text("üéØ Camada 2/3: Matching Heur√≠stico...")
    resultados_heur√≠stico = analyzer.matching_heuristico(
        extrato_df, 
        contabil_df, 
        resultados_exato['nao_matchados_extrato'],
        resultados_exato['nao_matchados_contabil'],
        tolerancia_data,
        tolerancia_valor,
        similaridade_minima
    )
    progress_bar.progress(80)
    
    status_text.text("üéØ Camada 3/3: An√°lise com IA...")
    resultados_ia = analyzer.matching_ia(
        extrato_df,
        contabil_df,
        resultados_heur√≠stico['nao_matchados_extrato'],
        resultados_heur√≠stico['nao_matchados_contabil']
    )
    progress_bar.progress(95)
    
    # Consolidar resultados
    status_text.text("üìä Consolidando resultados...")
    resultados_finais = analyzer.consolidar_resultados(
        resultados_exato, resultados_heur√≠stico, resultados_ia
    )
    
    # Salvar na sess√£o
    st.session_state['resultados_analise'] = resultados_finais
    st.session_state['extrato_df'] = extrato_df
    st.session_state['contabil_df'] = contabil_df
    
    progress_bar.progress(100)
    status_text.text("‚úÖ An√°lise conclu√≠da!")
    
except Exception as e:
    st.error(f"‚ùå Erro na an√°lise: {str(e)}")
    st.stop()

# Mostrar resultados
st.divider()
st.header("üìä Resultados da An√°lise")

# M√©tricas principais
col1, col2, col3, col4 = st.columns(4)

with col1:
    total_extrato = len(extrato_df)
    match_extrato = len(resultados_finais['matches'])
    st.metric("Transa√ß√µes Banc√°rias", total_extrato, f"{match_extrato} matched")

with col2:
    total_contabil = len(contabil_df)
    match_contabil = sum(len(match['ids_contabil']) for match in resultados_finais['matches'])
    st.metric("Lan√ßamentos Cont√°beis", total_contabil, f"{match_contabil} matched")

with col3:
    taxa_sucesso = (match_extrato / total_extrato * 100) if total_extrato > 0 else 0
    st.metric("Taxa de Matching", f"{taxa_sucesso:.1f}%")

with col4:
    excecoes = len(resultados_finais['excecoes'])
    st.metric("Exce√ß√µes Identificadas", excecoes)

# Abas de detalhamento
aba1, aba2, aba3, aba4 = st.tabs(["üéØ Matches Propostos", "‚ö†Ô∏è Exce√ß√µes", "üìà Estat√≠sticas", "üîç Detalhes T√©cnicos"])

with aba1:
    st.subheader("Matches Identificados")
    
    if resultados_finais['matches']:
        # Tabela resumida de matches
        matches_data = []
        for match in resultados_finais['matches']:
            matches_data.append({
                'Tipo': match['tipo_match'],
                'Camada': match['camada'],
                'Transa√ß√µes Banco': len(match['ids_extrato']),
                'Lan√ßamentos Cont√°beis': len(match['ids_contabil']),
                'Valor Total': match['valor_total'],
                'Confian√ßa': f"{match['confianca']}%",
                'Explica√ß√£o': match['explicacao'][:50] + "..." if len(match['explicacao']) > 50 else match['explicacao']
            })
        
        matches_df = pd.DataFrame(matches_data)
        st.dataframe(matches_df, use_container_width=True)
        
        # Detalhes expand√≠veis
        with st.expander("üîç Ver Detalhes Completos dos Matches"):
            for i, match in enumerate(resultados_finais['matches']):
                st.markdown(f"**Match {i+1} - {match['tipo_match']}**")
                st.write(f"**Camada:** {match['camada']} | **Confian√ßa:** {match['confianca']}%")
                st.write(f"**Explica√ß√£o:** {match['explicacao']}")
                
                # Mostrar transa√ß√µes envolvidas
                col_a, col_b = st.columns(2)
                with col_a:
                    st.write("**Transa√ß√µes Banc√°rias:**")
                    transacoes_extrato = extrato_df[extrato_df['id'].isin(match['ids_extrato'])]
                    st.dataframe(transacoes_extrato[['data', 'valor', 'descricao']])
                
                with col_b:
                    st.write("**Lan√ßamentos Cont√°beis:**")
                    transacoes_contabil = contabil_df[contabil_df['id'].isin(match['ids_contabil'])]
                    st.dataframe(transacoes_contabil[['data', 'valor', 'descricao']])
                
                st.divider()
    else:
        st.warning("Nenhum match identificado")

with aba2:
    st.subheader("Exce√ß√µes e Diverg√™ncias")
    
    if resultados_finais['excecoes']:
        excecoes_data = []
        for excecao in resultados_finais['excecoes']:
            excecoes_data.append({
                'Tipo': excecao['tipo'],
                'Severidade': excecao['severidade'],
                'Descri√ß√£o': excecao['descricao'],
                'Transa√ß√µes Envolvidas': len(excecao['ids_envolvidos']),
                'A√ß√£o Sugerida': excecao['acao_sugerida']
            })
        
        excecoes_df = pd.DataFrame(excecoes_data)
        st.dataframe(excecoes_df, use_container_width=True)
        
        # Detalhes das exce√ß√µes
        with st.expander("üìã Detalhes das Exce√ß√µes"):
            for excecao in resultados_finais['excecoes']:
                st.write(f"**{excecao['tipo']}** - {excecao['severidade']}")
                st.write(f"**Descri√ß√£o:** {excecao['descricao']}")
                st.write(f"**A√ß√£o Sugerida:** {excecao['acao_sugerida']}")
                st.divider()
    else:
        st.success("‚úÖ Nenhuma exce√ß√£o cr√≠tica identificada")

with aba3:
    st.subheader("Estat√≠sticas Detalhadas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìà Distribui√ß√£o por Camada**")
        camadas_data = {
            'Camada': ['Exata', 'Heur√≠stica', 'IA'],
            'Matches': [
                len([m for m in resultados_finais['matches'] if m['camada'] == 'exata']),
                len([m for m in resultados_finais['matches'] if m['camada'] == 'heuristica']),
                len([m for m in resultados_finais['matches'] if m['camada'] == 'ia'])
            ]
        }
        st.bar_chart(pd.DataFrame(camadas_data).set_index('Camada'))
    
    with col2:
        st.markdown("**üîß Tipos de Matching**")
        tipos_data = {
            'Tipo': ['1:1', '1:N', 'N:1'],
            'Quantidade': [
                len([m for m in resultados_finais['matches'] if m['tipo_match'] == '1:1']),
                len([m for m in resultados_finais['matches'] if m['tipo_match'] == '1:N']),
                len([m for m in resultados_finais['matches'] if m['tipo_match'] == 'N:1'])
            ]
        }
        st.bar_chart(pd.DataFrame(tipos_data).set_index('Tipo'))

with aba4:
    st.subheader("Detalhes T√©cnicos da An√°lise")
    
    st.json({
        "configuracoes_aplicadas": {
            "tolerancia_data_dias": tolerancia_data,
            "tolerancia_valor_reais": tolerancia_valor,
            "similaridade_minima_percentual": similaridade_minima,
            "politica_1n_habilitada": policy_1n,
            "politica_n1_habilitada": policy_n1
        },
        "estatisticas_processamento": {
            "transacoes_processadas_extrato": total_extrato,
            "lancamentos_processados_contabil": total_contabil,
            "tempo_analise_estimado": "15-30 segundos"
        }
    })

# Navega√ß√£o para pr√≥xima etapa
st.divider()
st.subheader("Pr√≥xima Etapa")

if st.button("üìã Revisar e Gerar Relat√≥rio", type="primary", use_container_width=True):
    st.switch_page("pages/revisao_resultados.py")

